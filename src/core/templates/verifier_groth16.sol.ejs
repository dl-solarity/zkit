// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract <%=verifier_id%> {
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        <%=vk_alpha_1[0]%>;
    uint256 public constant ALPHA_Y =
        <%=vk_alpha_1[1]%>;
    uint256 public constant BETA_X1 =
        <%=vk_beta_2[0][1]%>;
    uint256 public constant BETA_X2 =
        <%=vk_beta_2[0][0]%>;
    uint256 public constant BETA_Y1 =
        <%=vk_beta_2[1][1]%>;
    uint256 public constant BETA_Y2 =
        <%=vk_beta_2[1][0]%>;
    uint256 public constant GAMMA_X1 =
        <%=vk_gamma_2[0][1]%>;
    uint256 public constant GAMMA_X2 =
        <%=vk_gamma_2[0][0]%>;
    uint256 public constant GAMMA_Y1 =
        <%=vk_gamma_2[1][1]%>;
    uint256 public constant GAMMA_Y2 =
        <%=vk_gamma_2[1][0]%>;
    uint256 public constant DELTA_X1 =
        <%=vk_delta_2[0][1]%>;
    uint256 public constant DELTA_X2 =
        <%=vk_delta_2[0][0]%>;
    uint256 public constant DELTA_Y1 =
        <%=vk_delta_2[1][1]%>;
    uint256 public constant DELTA_Y2 =
        <%=vk_delta_2[1][0] -%>;

    <% for (let i = 0; i < IC.length; i++) { %>uint256 public constant IC<%=i%>_X =
        <%=IC[i][0]%>;
    uint256 public constant IC<%=i%>_Y =
        <%=IC[i][1]%>;
    <% } -%>

    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;
    <%function generateType(dimension) {
        if (dimension.length === 0) {
            return "uint256";
        } else {
            return "uint256" + dimension.map(d => `[${d}]`).join("");
        }
    }

    const structFields = signals
            .map(signal => {
                return `${generateType(signal.dimension)} ${signal.name};`
            })
            .join("\n\t\t");
    -%>

    struct PubSignals {
        <%= structFields %>
    }

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[<%=IC.length - 1%>] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, BASE_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(sub(gas(), 2000), 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(sub(gas(), 2000), 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                <% for (let i = 1; i <= nPublic; i++) { %>if iszero(g1MulAdd(pointer_, IC<%=i%>_X, IC<%=i%>_Y, mload(add(pubSignals_, <%=(i - 1) * 32%>)))) {
                    leave
                }
                <% } -%>

                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(sub(gas(), 2000), 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            for { let i := 0 } lt(i, <%= nPublic %>) { i := add(i, 32) } {
                verified_ := and(verified_, checkField(mload(add(publicSignals_, i))))
            }

            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }

    function verifyProofWithStruct(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        PubSignals memory publicSignals_
    ) public view returns (bool verified_) {
        return verifyProof(pointA_, pointB_, pointC_, _linearizePubSignals(publicSignals_));
    }

    <%
        const generateLinearizationFunction = (name, dimension, offsetVar) => {
            if (dimension.length === 0) {
                return `currentOffset := _linearizeUint(linearizedArray_, currentOffset, add(publicSignals_, ${offsetVar}))`;
            } else if (dimension.length === 1) {
                return `currentOffset := _linearize1DArray(linearizedArray_, currentOffset, mload(add(publicSignals_, ${offsetVar})), ${dimension[0]})`;
            } else {
                return `currentOffset := _linearize${dimension.length}DArray(linearizedArray_, currentOffset, mload(add(publicSignals_, ${offsetVar})), ${dimension.reverse().join(", ")})`;
            }
        };

        const generateHelperFunctions = (maxDimension) => {
            let helperFunctions = "";
            const indent = "\t\t\t";

            if (maxDimension >= 1) {
                helperFunctions += `
            \n${indent}function _linearize1DArray(resultArray_, currentOffset_, ptr_, arrayLength_) -> offset_ {
                for { let i := 0 } lt(i, arrayLength_) { i := add(i, 1) } {
                    currentOffset_ := _linearizeUint(resultArray_, currentOffset_, add(ptr_, mul(i, 32)))
                }

                offset_ := currentOffset_
            }`;
            }

            const generateDimensionParams = (dimensionsNumber, startIndex = 0) => {
                return Array.from({ length: dimensionsNumber }, (_, i) => `dim${i + startIndex}Length`).join(", ");
            }

            for (let d = 2; d <= maxDimension; d++) {
                let func = `
            \n${indent}function _linearize${d}DArray(resultArray_, currentOffset_, ptr_, ${generateDimensionParams(d)}) -> offset_ {
                for { let i := 0 } lt(i, dim0Length) { i := add(i, 1) } {
                    currentOffset_ := _linearize${d - 1}DArray(resultArray_, currentOffset_, mload(add(ptr_, mul(i, 32))), ${generateDimensionParams(d - 1, 1)})
                }

                offset_ := currentOffset_
            }`;
                helperFunctions += func;
            }

            return helperFunctions;
        };

        const maxDimension = Math.max(...signals.map(signal => signal.dimension.length));
    -%>
function _linearizePubSignals(PubSignals memory publicSignals_) private pure returns (uint256[<%= IC.length - 1 %>] memory linearizedArray_) {
        assembly {
            let currentOffset := 0

            function _linearizeUint(resultArray_, currentOffset_, valuePtr_) -> offset_ {
                mstore(add(resultArray_, currentOffset_), mload(valuePtr_))
                offset_ := add(currentOffset_, 32)
            }<%- generateHelperFunctions(maxDimension) %><%
            signals.forEach((signal, index) => {
                const linearizationCode = generateLinearizationFunction(signal.name, signal.dimension, index * 32);
            %>

            // <%= signal.name %>
            <%= linearizationCode %><%}); %>
        }
    }
}
